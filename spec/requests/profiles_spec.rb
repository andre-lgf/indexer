# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe("/profiles", type: :request) do
  include_context "with_url_shortener"
  # This should return the minimal set of attributes required to create a valid
  # Profile. As you add validations to Profile, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { attributes_for(:profile) }

  let(:invalid_attributes) { attributes_for(:profile, name: nil) }

  describe "GET /index" do
    it "renders a successful response" do
      Profile.create!(valid_attributes)
      get profiles_url
      expect(response).to(be_successful)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      profile = Profile.create!(valid_attributes)
      get profile_url(profile)
      expect(response).to(be_successful)
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_profile_url
      expect(response).to(be_successful)
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      profile = Profile.create!(valid_attributes)
      get edit_profile_url(profile)
      expect(response).to(be_successful)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Profile" do
        expect do
          post(profiles_url, params: { profile: valid_attributes })
        end.to(change(Profile, :count).by(1))
      end

      it "redirects to the created profile" do
        post profiles_url, params: { profile: valid_attributes }
        expect(response).to(redirect_to(profile_url(Profile.last)))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Profile" do
        expect do
          post(profiles_url, params: { profile: invalid_attributes })
        end.to(change(Profile, :count).by(0))
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post profiles_url, params: { profile: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      new_name = Faker::Name.name
      let(:new_attributes) do
        { name: new_name }
      end

      it "updates the requested profile" do
        profile = Profile.create!(valid_attributes)
        patch profile_url(profile), params: { profile: new_attributes }
        profile.reload
        expect(profile.name).to(eq(new_name))
      end

      it "redirects to the profile" do
        profile = Profile.create!(valid_attributes)
        patch profile_url(profile), params: { profile: new_attributes }
        profile.reload
        expect(response).to(redirect_to(profile_url(profile)))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        profile = Profile.create!(valid_attributes)
        patch profile_url(profile), params: { profile: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested profile" do
      profile = Profile.create!(valid_attributes)
      expect do
        delete(profile_url(profile))
      end.to(change(Profile, :count).by(-1))
    end

    it "redirects to the profiles list" do
      profile = Profile.create!(valid_attributes)
      delete profile_url(profile)
      expect(response).to(redirect_to(profiles_url))
    end
  end

  describe "PUT /reindex" do
    it "reindexes the requested profile" do
      profile = Profile.create!(valid_attributes)
      allow(FetchProfileJob).to(receive(:perform_async).with(profile.id))
      put reindex_profile_url(profile)
      expect(FetchProfileJob).to(have_received(:perform_async).with(profile.id))
    end
  end
end
